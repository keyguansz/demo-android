apply plugin: 'com.android.application'
//获取并格式化时间信息，注意，应该是与android{}同一层级
def buildTime() {
    return new Date().format("yyyy_MM_dd", TimeZone.getTimeZone("UTC"))
}

def appId1 = "k.demo.gradle.app1"
def appId2 = "k.demo.gradle.app2"
/*def manifestPlaceholders1 = [packagePlace: applicationId1, applicationLabel: "@string/app_name", amapKey: "amapKey"]
def manifestPlaceholders2 = [packagePlace: applicationId2, applicationLabel: "@string/app_name", amapKey: "amapKey"]*/

android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'
    defaultConfig {
        applicationId "k.demo.gradle"
        minSdkVersion 22
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    signingConfigs{
        kConfig{
            storeFile file ('k.jks')//签名文件路径，保持在当前文件的路径即可
            //keystore的路径通常使用项目根目录的相对路径，但也可以是使用绝对路径，尽管这不推荐
            storePassword '123456' //密码
            keyAlias 'k'
            keyPassword '123456'  //密码
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.kConfig // 配置release包的签名,必须要在signingConfigs的定义之后
            //只针对release版本进行配置
            applicationVariants.all {
                variant ->
                    variant.outputs.each {
                        output ->
                            def outputFile = output.outputFile
                            if (outputFile != null && outputFile.name.endsWith('.apk') && 'release'.equals(variant.buildType.name)) {
                                // 输出apk格式命名如：Gradle_v1.0_2016_07_01_wandoujia.apk
                                def fileName = "Gradl_v${variant.versionName}_${buildTime()}_${variant.flavorName}.apk"
                                output.outputFile = new File(outputFile.parent, fileName)
                            }
                    }
            }
        }
        debug {
            //同时在一台设备安装debug和release版apk。
            applicationIdSuffix ".debug"
            applicationVariants.all {
                variant ->
                    variant.outputs.each {
                        output ->
                            def outputFile = output.outputFile
                            if (outputFile != null && outputFile.name.endsWith('.apk') && 'debug'.equals(variant.buildType.name)) {
                                // 输出apk格式命名如：Gradle_v1.0_2016_07_01_wandoujia.apk
                                def fileName = "Gradl_v${variant.versionName}_${buildTime()}_${variant.flavorName}.apk"
                                output.outputFile = new File(outputFile.parent, fileName)
                            }
                    }
            }
        }
    }

  /*  productFlavors {
        serverApp {
            buildConfigField "boolean", "BUILD_KPAD", "false"
            applicationId = appId1
            manifestPlaceholders = manifestPlaceholders1
        }
        clientApp {
            buildConfigField "boolean", "BUILD_KPAD", "false"
            applicationId = appId2
            manifestPlaceholders = manifestPlaceholders2
        }
        serverApp {
            buildConfigField "boolean", "BUILD_KPAD", "true"
            applicationId = appId1
            manifestPlaceholders = manifestPlaceholders1
        }
        clientApp {
            buildConfigField "boolean", "BUILD_KPAD", "true"
            applicationId = appId2
            manifestPlaceholders = manifestPlaceholders2
        }
    }*/
    productFlavors {
        yst1 {
            applicationId = "k.demo.gradle"
            buildConfigField "int", "BUILD_YST", "1"
        }
        yst2 {
            buildConfigField "int", "BUILD_YST", "2"
        }
        yst3 {
            buildConfigField "int", "BUILD_YST", "3"
        }
    }
    sourceSets {
       /* main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src', 'src_dpad', 'v2']
            resources.srcDirs = ['gen']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jni.srcDirs = [] // This prevents the auto generation of Android.mk
            jniLibs.srcDir 'libs' // This is not necessary unless you have precompiled libraries in your project.
        }*/
        yst1 {
            manifest.srcFile './src/main/AndroidManifestYst1.xml'
            assets.srcDirs = ['assets_djipad']
            res.srcDirs = ['res_phone']
        }
        yst2 {
            manifest.srcFile 'AndroidManifestYst2.xml'
            assets.srcDirs = ['assets_djipad']
            res.srcDirs = ['res_phone', 'res_tablet', "res_yst2"]
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(path: ':klib')
    debugCompile project(path: ':klib', configuration: 'debug')
    releaseCompile project(path: ':klib', configuration: 'release')
}
